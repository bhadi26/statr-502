install.packages("knitr")
library(ggplot2)
install.packages("ggplot2")
install.packages("tidyr")
install.packages("dplyr")
chocolate <- read.csv("/Users/bt0x/Downloads/flavors_of_cacao.csv")
library(ggplot2)
library(tidyr)
library(dplyr)
chocolate <- read.csv("/Users/bt0x/Downloads/flavors_of_cacao.csv")
knitr::kable("head(chocolate)")
knitr::kable(head(chocolate))
head(chocolate)
head(chocolate)
isNull(Bean.Type)
?NULL
is.null
is.null(chocolate$Bean.Type)
missing_bean_type <- chocolate %>%
filter(is.null(Bean.Type) == TRUE)
unique(chocolate$Bean.Type)
missing_bean_type <- chocolate %>%
filter(Bean.Type = "")
missing_bean_type <- chocolate %>%
filter(Bean.Type == "")
missing_bean_type
head(chocolate$Bean.Type)
str(chocolate)
head(chocolate)
len
?len
??len
length
unique(length(chocolate$Bean.Type))
length(chocolate$Bean.Type)
?length
head(chocolate)
str(chocolate)
summary(chocolate)
unique(chocolate$Cocoa.Percent)
?as.character
chocolate$Cocoa.Percent.Numeric <-  chocolate$Cocoa.Percent %>%
as.character(.) %>%
as.numeric(.)
head(chocolate)
chocolate$Cocoa.Percent %>%
as.character(.)
?gsub
chocolate$Cocoa.Percent.Numeric <-  chocolate$Cocoa.Percent %>%
as.character(.) %>%
gsub("%", "", .) %>%
as.numeric(.)
head(chocolate)
unique(chocolate$Specific.Bean.Origin.or.Bar.Name)
head(chocolate)
ggplot(data = chocolate, aes(x = Company.Location, y = Cocoa.Percent.Numeric)) +
geom_boxplot() +
theme_classic()
head(chocolate)
ggplot(data = chocolate, aes(x = Cocoa.Percent.Numeric, y = Rating) +
geom_point() +
theme_classic() +
ggtitle("Rating vs. Cocoa Percent")
ggplot(data = chocolate, aes(x = Cocoa.Percent.Numeric, y = Rating)) +
geom_point() +
theme_classic() +
ggtitle("Rating vs. Cocoa Percent")
ggplot(data = chocolate, aes(x = Cocoa.Percent.Numeric, y = Rating, size = nrow(chocolate))) +
geom_point() +
theme_classic() +
ggtitle("Rating vs. Cocoa Percent")
ggplot(data = chocolate, aes(x = Cocoa.Percent.Numeric, y = Rating, size = nrow())) +
geom_point() +
theme_classic() +
ggtitle("Rating vs. Cocoa Percent")
ggplot(data = chocolate, aes(x = Cocoa.Percent.Numeric, y = Rating)) +
geom_point() +
theme_classic() +
ggtitle("Rating vs. Cocoa Percent")
ggplot(data = chocolate, aes(x = Cocoa.Percent)) +
geom_histogram() +
theme_classic() +
ggtitle("Distribution of Cocoa Percent")
head(chocolate)
ggplot(data = chocolate, aes(x = Cocoa.Percent.Numeric)) +
geom_histogram() +
theme_classic() +
ggtitle("Distribution of Cocoa Percent")
ggplot(data = chocolate, aes(x = Cocoa.Percent)) +
geom_bar() +
theme_classic() +
ggtitle("Distribution of Cocoa Percent")
ggplot(data = chocolate, aes(x = Cocoa.Percent)) +
geom_bar() +
theme_classic() +
ggtitle("Distribution of Cocoa Percent") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = chocolate, aes(x = Cocoa.Percent)) +
geom_bar() +
theme_classic() +
ggtitle("Distribution of Cocoa Percent") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs (x = "Cocoa Percent", y = "Count")
chocolate_model <- lm(rating ~ Cocoa.Percent.Numeric, data = chocolate)
chocolate_model <- lm(Rating ~ Cocoa.Percent.Numeric, data = chocolate)
summary(chocolate_model)
chocolate_model <- lm(Rating ~ Cocoa.Percent, data = chocolate)
summary(chocolate_model)
chocolate_model <- lm(Rating ~ Cocoa.Percent.Numeric, data = chocolate)
summary(chocolate_model)
sd(chocolate$Cocoa.Percent.Numeric)
mean(chocolate$Cocoa.Percent.Numeric)
sd(chocolate$Cocoa.Percent.Numeric)
cocoa.rating.z <- (chocolate$Cocoa.Percent.Numeric - mean(chocolate$Cocoa.Percent.Numeric))
/sd(chocolate$Cocoa.Percent.Numeric)
(chocolate$Cocoa.Percent.Numeric - mean(chocolate$Cocoa.Percent.Numeric))
cocoa.rating.z <- (chocolate$Cocoa.Percent.Numeric - mean(chocolate$Cocoa.Percent.Numeric))
/ sd(chocolate$Cocoa.Percent.Numeric)
cocoa.rating.z <- (chocolate$Cocoa.Percent.Numeric - mean(chocolate$Cocoa.Percent.Numeric)) / sd(chocolate$Cocoa.Percent.Numeric)
#Fit Model with centered variable
chocolate_model.z <- lm(Rating ~ cocoa.rating.z, data = chocolate)
#Show model
summary(chocolate_model.z)
#Center and scale model by mean and standard deviation respectively
cocoa.rating.z <- (chocolate$Cocoa.Percent.Numeric - mean(chocolate$Cocoa.Percent.Numeric)) / sd(chocolate$Cocoa.Percent.Numeric)
#Fit Model with centered variable
chocolate_model.z <- lm(Rating ~ cocoa.rating.z, data = chocolate)
#Show model
summary(chocolate_model.z)
ggplot(data = chocolate, aes(x = as.factor(Cocoa.Percent.Numeric))) +
geom_bar() +
theme_classic() +
ggtitle("Distribution of Cocoa Percent") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs (x = "Cocoa Percent", y = "Count")
setwd("~/Documents/personal_git_repo/statr-502/hw5")
#Load Data
abalone <- read.csv("abaloneTrain.csv")
head(abalone)
head(abalone)
install.packages("MASS")
library(MASS)
boxcox(rings ~ length + width + height + allweight + factor(sex), data = abalone, lambda = seq(-1, 1, length = 50))
library(MASS)
boxcox(rings ~ length + width + height, data = abalone, lambda = seq(-1, 1, length = 50))
library(MASS)
boxcox(rings ~ length, data = abalone, lambda = seq(-1, 1, length = 50))
head(abalone)
library(MASS)
boxcox(rings ~ length + width + height + allweight + factor(sex), data = abalone, lambda = seq(-1, 1, length = 50))
par(mar=c(4,4,.5,1))
library(MASS)
boxcox(Volume ~ Height + Girth, data = trees, lambda = seq(0.1, 0.5, length = 50))
library(MASS)
lambda <- boxcox(rings ~ length + width + height + allweight + factor(sex), data = abalone, lambda = seq(-1, 1, length = 50))
lambda
max(lambda)
head(lambda)
str(lambda)
filter(lambda, y == max(y))
max(lambda$y)
filter(lambda, y == -8118.388)
filter(lambda$y, y == -8118.388)
filter(lambda, y == -8118.388)
str(lambda)
filter(lambda, y == -8118)
filter(lambda, y = -8118.38)
?subset
library(ggplot2)
filter(lambda, y == -8118)
library(dplyr)
filter(lambda, y == -8118)
lambda <- as.data.frame(lambda)
filter(lambda, y == -8118)
filter(lambda, y == -8118.38)
str(lambda)
colnames(lambda) <- c("lambda", "loglik")
filter(lambda, logLik == -8118.38)
dplyr::filter(lambda, logLik == -8118.38)
dplyr::filter(lambda, loglik == -8118.38)
dplyr::filter(lambda, loglik == max(loglik))
library(MASS)
lambda <- boxcox(rings ~ length + width + height + allweight + factor(sex), data = abalone, lambda = seq(-.5, .5, length = 50))
#Transformed Model
mod0 <- lm((rings) ~ length + width + height + allweight + factor(sex), data = abalone)
mod1 <- lm((rings)^-0.2 ~ length + width + height + allweight + factor(sex), data = abalone)
summary(mod1)
summary(mod0)
summary(mod1)
head(abalone)
pois.mod <- glm(rings ~ length + width + height + allweight + factor(sex), data = abalone, family = poisson)
pois.mod <- glm(rings ~ length + width + height + allweight + factor(sex), data = abalone, family = poisson)
summary(pois.mod)
plot(pois.mod,1)
plot(mod1,1)
?stepAIC
MASS::stepAIC(mod1, scope = (length + width + height + allweight + factor(sex))^2, direction = "backward")
mod1
MASS::stepAIC(mod1, scope = (length + width + height + allweight + factor(sex))^2, direction = "backward")
MASS::stepAIC(mod1, scope = (length + width + height + allweight + factor(sex))^2, direction = "backward")
MASS::stepAIC(mod1, direction = "backward")
forward.mod1 <- MASS::stepAIC(mod1, scope = (length + width + height + allweight + factor(sex))^2 direction = "forward")
backward.mod1 <- MASS::stepAIC(mod1, direction = "backward")
forward.mod1 <- MASS::stepAIC(mod1, scope = (length + width + height + allweight + factor(sex))^2, direction = "forward")

invlogit( coef(final.mod)[1] + coef(final.mod)[2]*mean(log(movies.pr$revenue)))
mean(movies.pr$revenue)
exp(mean(log(movies.pr$revenue)))
mean(log(movies.pr$revenue))
exp(17.7346)
log(mean(movies.pr$revenue))
coef(final.mod)[3]
final.mod.aug <- augment(final.mod, type.predict = "response")
final.mod.aug <- augment(final.mod, type.predict = "response")
#let's plot!  (#just a regular smoother)
ggplot(data = final.mod.aug, aes(x = log.revenue., y = profitable.ind)) +
geom_jitter(height = 0.02) +
geom_point(data = final.mod.aug, aes(x = log.revenue., y = .fitted), color = "#00cdcd", alpha = 0.2) +
geom_smooth(method = "glm", se = F,
method.args = list(family = "binomial")) +
theme_few() +
labs(x = "Log Revenue", y = "Probability of Profitability") +
ggtitle("Profitability - Actual vs. Predicted")
#Plot redisuals (binned)
#bin
profit.bin <- final.mod.aug %>%
mutate(q_group = cut(log.revenue.,
breaks = quantile(log.revenue., seq(0, 1, length.out = 30),
include.lowest = TRUE))) %>%
group_by(q_group) %>%
summarize(.resid = mean(.resid),
log.revenue = mean(log.revenue.))
#plot
resid.plot1 <- ggplot(profit.bin, aes(x = log.revenue, y = .resid)) +
geom_point() +
geom_smooth() +
ggtitle("Final Model") +
labs(x = "Log Revenue", y = "Residual")
resid.plot1 + theme_few()
#Compare predicted to actual
final.mod.aug$predicted <- round(final.mod.aug$.fitted)
knitr::kable(with(final.mod.aug, table(profitable.ind, predicted)))
#plot with comparison of prediction
ggplot(data = final.mod.aug, aes(x = log.revenue., y = profitable.ind)) +
geom_jitter(height = 0.02) +
geom_point(data = final.mod.aug, aes(x = log.revenue., y = .fitted), color = "#00cdcd", alpha = 0.2) +
theme_few() +
labs(x = "Log Revenue", y = "Probability of Profitability") +
ggtitle("Profitability - Actual vs. Predicted") +
facet_grid(profitable.ind ~ predicted)
final.mod.aug <- augment(final.mod, type.predict = "response")
#let's plot!  (#just a regular smoother)
ggplot(data = final.mod.aug, aes(x = log.revenue., y = profitable.ind)) +
geom_jitter(height = 0.02) +
geom_point(data = final.mod.aug, aes(x = log.revenue., y = .fitted), color = "#00cdcd", alpha = 0.2) +
geom_smooth(method = "glm", se = F,
method.args = list(family = "binomial")) +
theme_few() +
labs(x = "Log Revenue", y = "Probability of Profitability") +
ggtitle("Profitability - Actual vs. Predicted")
#Plot redisuals (binned)
#bin
profit.bin <- final.mod.aug %>%
mutate(q_group = cut(log.revenue.,
breaks = quantile(log.revenue., seq(0, 1, length.out = 30),
include.lowest = TRUE))) %>%
group_by(q_group) %>%
summarize(.resid = mean(.resid),
log.revenue = mean(log.revenue.))
#plot
resid.plot <- ggplot(profit.bin, aes(x = log.revenue, y = .resid)) +
geom_point() +
geom_smooth() +
ggtitle("Final Model") +
labs(x = "Log Revenue", y = "Residual")
resid.plot + theme_few()
#Compare predicted to actual
final.mod.aug$predicted <- round(final.mod.aug$.fitted)
knitr::kable(with(final.mod.aug, table(profitable.ind, predicted)), caption = "Confusion Matrix - Predicted vs. Actual")
#plot with comparison of prediction
ggplot(data = final.mod.aug, aes(x = log.revenue., y = profitable.ind)) +
geom_jitter(height = 0.02) +
geom_point(data = final.mod.aug, aes(x = log.revenue., y = .fitted), color = "#00cdcd", alpha = 0.2) +
theme_few() +
labs(x = "Log Revenue", y = "Probability of Profitability") +
ggtitle("Profitability - Actual vs. Predicted") +
facet_grid(profitable.ind ~ predicted)
nrow(filter(final.mod.aug, profitable.ind == 1 & predicted ==1))
nrow(filter(final.mod.aug, profitable.ind == 1 & predicted ==1))
nrow(filter(final.mod.aug, predicted ==1))
nrow(filter(final.mod.aug, profitable.ind ==1))
1517+89
invlogit( coef(final.mod)[1]) + coef(final.mod)[2]*mean(log(movies.pr$revenue))) * 100
nrow(filter(final.mod.aug, profitable.ind == 1 & predicted == 0)) +  nrow(filter(final.mod.aug, profitable.ind == 0 & predicted ==1))
nrow(filter(final.mod.aug, profitable.ind == 1)
nrow(filter(final.mod.aug, profitable.ind == 1))
invlogit( coef(final.mod)[1] + coef(final.mod)[2]*mean(log(movies.pr$revenue))) * 100
head(movies)
movies <- read.csv("Data/tmdb_5000_movies.csv") #original dataset
str(movies)
knitr::kable(summary(movies.pr))
knitr::kable(summary(movies.pr),'latex')
knitr::kable(head(movies.pr))
knitr::kable(head(movies.pr[,2:8]))
knitr::kable(head(movies.pr[,2:10]))
knitr::kable(head(movies.pr[,2:112]))
knitr::kable(head(movies.pr[,2:12]))
knitr::kable(head(movies.pr[,2:14]))
knitr::kable(head(movies.pr[,2:15]))
knitr::kable(head(movies.pr[,2:14]))
knitr::kable(head(movies.pr[,2:14])) %>%
kable_styling(latex_options = c("striped", "scale_down"))
install.packages("kableExtra")
library(kableExtra)
knitr::kable(head(movies.pr[,2:14])) %>%
kable_styling(latex_options = c("striped", "scale_down"))
knitr::kable(head(movies.pr[,2:14]), format = "latex") %>%
kable_styling(latex_options = c("striped", "scale_down"))
knitr::kable(movies.pr[1:5,2:14]), format = "latex") %>%
movies.pr[1:5,2:14]
movies.pr[5:10,2:14]
movies.pr[10:15,2:14]
movies.pr[25:30,2:14]
movies.pr[26:31,2:14]
movies.pr[27:32,2:14]
knitr::kable(head(movies.pr[,2:14]), format = "latex") %>%
kable_styling(latex_options = c("striped", "scale_down"))
p1 <- ggplot(data = movies.pr, aes(x = budget, y = revenue, col = profitable)) +
geom_point(alpha = 0.5) +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
theme_few() +
ggtitle("Revenue vs. Budget - Profitability")
#load packages
library(ggplot2)
library(dplyr)
library(scales)
library(broom)
library(ggthemes)
library(vcd)
library(broom)
library(car)
library(arm) #invlogit
library(kableExtra)
p1 <- ggplot(data = movies.pr, aes(x = budget, y = revenue, col = profitable)) +
geom_point(alpha = 0.5) +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
theme_few() +
ggtitle("Revenue vs. Budget - Profitability")
p1
p1
ggplot(data = movies.pr, aes(x = genre, y = vote_count)) +
geom_boxplot() +
theme_few() +
coord_flip()  +
labs(x = "Genre", y = "Vote Count") +
facet_wrap(~profitable) +
ggtitle("Distribution of Votes by Genre and Profitability")
ggplot(data = movies.pr, aes(x = profitable, y = runtime)) +
geom_boxplot() +
theme_few() +
ggtitle("Run Time by Profitability")
#what's the distribution of runtime by genre?
ggplot(data = movies.pr, aes(x = genre, y = runtime)) +
geom_boxplot() +
theme_few() +
coord_flip() +
ggtitle("Run Time by Genre")
ggplot(data = movies.pr, aes(x = genre, y = runtime)) +
geom_boxplot() +
theme_few() +
coord_flip() +
ggtitle("Run Time by Genre")
ggplot(data = movies.pr, aes(x = profitable, y = runtime)) +
geom_boxplot() +
theme_few() +
ggtitle("Run Time by Profitability")
ggplot(data = movies.pr, aes(x = genre, y = vote_count)) +
geom_boxplot() +
theme_few() +
coord_flip()  +
labs(x = "Genre", y = "Vote Count") +
facet_wrap(~profitable) +
ggtitle("Distribution of Votes by Genre and Profitability")
ggplot(data = movies.pr, aes(x = release_year, fill = profitable)) +
geom_bar(stat = "count") +
theme_few() +
ggtitle("Count of movies by Year and Profitability")
ggplot(data = movies.pr, aes(x = release_year, fill = profitable)) +
geom_bar(stat = "count") +
theme_few() +
labs(x = "Release year", y = "Number of Movies")
ggtitle("Count of movies by Year and Profitability")
invlogit(coef(final.mod)[1])
library(ggplot2)
library(dplyr)
library(scales)
library(broom)
library(ggthemes)
library(vcd)
library(broom)
library(car)
library(arm) #invlogit
library(kableExtra)
library(shiny)
#Prep work
#Import data
movies.shiny <- read.csv("https://gist.githubusercontent.com/bhadi26/2537a988522aabea361e47ad4d03b83a/raw/c95515296fa02fa0a695548320a374d00e4f3ed6/processed_movies.csv")
str(movies.pr)
unique(movies.pr$genre)
max(movies.pr$budget)
max(movies.pr$revenue)
unique(movies.pr$profitable)
#what does this look like with a log transform on each variable?
p2 <- ggplot(data = movies.pr, aes(x = log(budget), y = log(revenue), col = profitable)) +
geom_point(alpha = 0.5) +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
theme_few() +
ggtitle("Log Revenue vs. Log Budget - Profitability")
#What does this look like by genre?
p2 + facet_wrap (~ genre) +
labs(x = "Log Budget", y = "Log Revenue")
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
ui <-
## For dropdown menu
actionLink <- function(inputId, ...) {
tags$a(href='javascript:void',
id=inputId,
class='action-button',
...)
}
shinyUI(
fluidPage(
titlePanel("TMDB Movies Data Set Exploration and Modeling"),
h4("Filter"),
sidebarPanel(
sliderInput("year",
"Year released",
min = 2000,
max = 2016,
value = c(2000,2016),
step = 1)
,
selectInput("genre",
"Genre",
c("Action/Adventure","Comedy","Drama","Family/Animation","Sci-fi/Fantasy","Romance","Crime","Western","Thriller/Mystery/Horror","Music","Documentary"))
,
sliderInput("budget",
"Budget",
min = 10000,
max = 380000000,
value = c(10000,380000000),
step = 1000)
,
sliderInput("revenue",
"Revenue",
min = 10000,
max = 3000000000,
value = c(10000,3000000000),
step = 1000)
),
mainPanel(
plotOutput("movieplot")
)
))
server <- shinyServer(function(input, output) {
output$movieplot <- renderPlot({
minyear <- input$year[1]
maxyear <- input$year[2]
minrevenue <- input$revenue[1]
maxrevenue <- input$revenue[2]
minbudget <-  input$budget[1]
maxbudget <-  input$budget[2]
profitable <- input$profitable
m <- movies.shiny %>%
filter(revenue >= minrevenue,
revenue <= maxrevenue,
year >= minyear,
year <= maxyear,
budget >= minbudget,
budget <= maxbudget)
# Optional: filter by genre
if (input$genre != "All") {
genre <- paste0("%", input$genre, "%")
m <- m %>% filter(genre = genre)
}
#create plot based on filtered data
movie.plot <- ggplot(data = m, aes(x = budget, y = budget, col = profitable)) +
geom_point(alpha = 0.5) +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
theme_few() +
ggtitle("Revenue vs. Budget - Profitability") +
facet_wrap (~ genre) +
labs(x = "Budget", y = "Revenue")
})
})
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
input$revenue[1]
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
runApp('~/Documents/personal_git_repo/statr-502/hw6/rebeccahadihw6shinyapp.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
#Prep work
#Import data
movies.shiny <- read.csv("https://gist.githubusercontent.com/bhadi26/2537a988522aabea361e47ad4d03b83a/raw/c95515296fa02fa0a695548320a374d00e4f3ed6/processed_movies.csv")
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
ggplot(data = movies.shiny, aes(x = budget, y = revenue)) +
geom_point()
#Run App
shinyApp(ui = ui, server = server)
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
str(movies.pr$release_year)
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
filter(movies.app, release_year >= 2014, release_year <= 2015)
filter(movies.shiny, release_year >= 2014, release_year <= 2015)
input$year[1]
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
str(movies.pr)
max(movies.pr$budget)
unique(movies.pr$genre)
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
str(movies.pr)
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
filter(movies.pr, genre %in% c("Action/Adventure","Comedy"))
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
test <- filter(movies.pr, genre %in%  c("Action/Adventure","Drama",
"Family/Animation","Sci-fi/Fantasy","Crime","Romance",
"Comedy", "Thriller/Mystery/Horror","Western","Music",
"War/History","Documentary"))
unique(test$genre)
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
unique(movies.shiny$genre)
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
genre %in%
c("Action/Adventure","Drama", "Family/Animation","Sci-fi/Fantasy","Crime","Romance",
"Comedy", "Thriller/Mystery/Horror","Western","Music","War/History","Documentary")
test2 <- filter(movies.pr, genre %in%
c("Action/Adventure","Drama", "Family/Animation","Sci-fi/Fantasy","Crime","Romance",
"Comedy", "Thriller/Mystery/Horror","Western","Music","War/History","Documentary"))
unique(test2$genre)
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
genrelist <-  c("Documentary","Action/Adventure","Drama", "Family/Animation","Sci-fi/Fantasy","Crime","Romance",
"Comedy", "Thriller/Mystery/Horror","Western","Music","War/History")
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
#Plot redisuals (binned)
#bin
profit.bin <- final.mod.aug %>%
mutate(q_group = cut(log.revenue.,
breaks = quantile(log.revenue., seq(0, 1, length.out = 30),
include.lowest = TRUE))) %>%
group_by(q_group) %>%
summarize(.resid = mean(.resid),
log.revenue = mean(log.revenue.))
#plot
resid.plot <- ggplot(profit.bin, aes(x = log.revenue, y = .resid)) +
geom_point() +
geom_smooth() +
ggtitle("Final Model") +
labs(x = "Log Revenue", y = "Residual")
resid.plot + theme_few()
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
fmod <-  glm(data = movies.shiny,
profitable.ind ~ log(revenue)  +  runtime.z + vote_average.z + vote_count.z,
family = binomial(link = "logit"))
movies.shiny$vote_count.z <- (movies.shiny$vote_count - mean(movies.shiny$vote_count)) / sd(movies.shiny$vote_count)
movies.shiny$runtime.z <- (movies.shiny$runtime - mean(movies.pr$runtime)) / sd(movies.shiny$runtime)
movies.shiny$vote_average.z <- (movies.shiny$vote_average - mean(movies.shiny$vote_average)) / sd(movies.shiny$vote_average)
fmod <-  glm(data = movies.shiny,
profitable.ind ~ log(revenue)  +  runtime.z + vote_average.z + vote_count.z,
family = binomial(link = "logit"))
rev <-  glm(data = movies.shiny,
profitable.ind ~ log(revenue)
family = binomial(link = "logit"))
voteaverage <-  glm(data = movies.shiny,
profitable.ind ~ vote_average.z,
family = binomial(link = "logit"))
votecount <-  glm(data = movies.shiny,
profitable.ind ~ vote_count.z,
family = binomial(link = "logit"))
budget <-  glm(data = movies.shiny,
profitable.ind ~ budget,
family = binomial(link = "logit"))
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
fmod <-  glm(data = movies.shiny,
profitable.ind ~ log(revenue)  +  runtime.z + vote_average.z + vote_count.z,
family = binomial(link = "logit"))
rev <-  glm(data = movies.shiny,
profitable.ind ~ log(revenue)
family = binomial(link = "logit"))
voteaverage <-  glm(data = movies.shiny,
profitable.ind ~ vote_average.z,
family = binomial(link = "logit"))
votecount <-  glm(data = movies.shiny,
profitable.ind ~ vote_count.z,
family = binomial(link = "logit"))
budget <-  glm(data = movies.shiny,
profitable.ind ~ budget,
family = binomial(link = "logit"))
fmod <-  glm(data = movies.shiny,
profitable.ind ~ log(revenue)  +  runtime.z + vote_average.z + vote_count.z,
family = binomial(link = "logit"))
rev <-  glm(data = movies.shiny,
profitable.ind ~ log(revenue)
family = binomial(link = "logit"))
voteaverage <-  glm(data = movies.shiny,
profitable.ind ~ vote_average.z,
family = binomial(link = "logit"))
votecount <-  glm(data = movies.shiny,
profitable.ind ~ vote_count.z,
family = binomial(link = "logit"))
budget <-  glm(data = movies.shiny,
profitable.ind ~ budget,
family = binomial(link = "logit"))
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
m1 <- glm(data = movies.shiny,profitable.ind ~ budget, family = binomial(link = "logit"))
m1.aug <- augment(m1, predict.type = "response")
head(m1.aug)
m1 <- voteaverage <-  glm(data = movies.shiny,profitable.ind ~ vote_average.z, family = binomial(link = "logit"))
m1.aug <- augment(m1, predict.type = "response")
head(m1.aug)
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
runApp('rebecca-hadi-final-project-shinyapp-statr502.R')
